<mxfile host="app.diagrams.net" modified="2022-03-03T13:01:01.370Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36" etag="GPGelWKHeAv8Ksw92Kqv" version="16.6.4" type="github">
  <diagram id="I7eYgPSbBQzUDDKfmuwj" name="第 1 页">
    <mxGraphModel dx="1550" dy="2004" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" background="#F4F1DE" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="dmyJtrqDC34_YT-JDQjB-2" value="template &lt;typename T&gt; class threadpool" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" vertex="1" parent="1">
          <mxGeometry x="34" y="56" width="475" height="382" as="geometry" />
        </mxCell>
        <mxCell id="dmyJtrqDC34_YT-JDQjB-3" value="  public:&#xa;    /*参数thread_number是线程池中线程的数量，max_requests是请求队列中最多允&#xa;    许的、等待处理的请求的数量*/&#xa;    threadpool(int thread_number = 8, int max_requests = 10000);&#xa;    ~threadpool();&#xa;    //往请求队列中添加任务&#xa;    bool append(T* request);" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" vertex="1" parent="dmyJtrqDC34_YT-JDQjB-2">
          <mxGeometry y="30" width="475" height="122" as="geometry" />
        </mxCell>
        <mxCell id="dmyJtrqDC34_YT-JDQjB-4" value="  private:&#xa;    /*工作线程运行的函数，它不断从工作队列中取出任务并执行之*/&#xa;    static void* worker(void* arg);&#xa;    void         run();" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" vertex="1" parent="dmyJtrqDC34_YT-JDQjB-2">
          <mxGeometry y="152" width="475" height="82" as="geometry" />
        </mxCell>
        <mxCell id="dmyJtrqDC34_YT-JDQjB-5" value="  private:&#xa;    int        m_thread_number; /*线程池中的线程数*/&#xa;    int        m_max_requests;  /*请求队列中允许的最大请求数*/&#xa;    pthread_t* m_threads; /*描述线程池的数组，其大小为m_thread_number*/&#xa;    std::list&lt;T*&gt; m_workqueue;   /*请求队列*/&#xa;    locker        m_queuelocker; /*保护请求队列的互斥锁*/&#xa;    sem           m_queuestat;   /*是否有任务需要处理*/&#xa;    bool          m_stop;        /*是否结束线程*/" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" vertex="1" parent="dmyJtrqDC34_YT-JDQjB-2">
          <mxGeometry y="234" width="475" height="148" as="geometry" />
        </mxCell>
        <mxCell id="dmyJtrqDC34_YT-JDQjB-6" value="class http_conn " style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=30;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;rounded=0;sketch=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" vertex="1" parent="1">
          <mxGeometry x="897" y="-90" width="663" height="1845" as="geometry" />
        </mxCell>
        <mxCell id="dmyJtrqDC34_YT-JDQjB-7" value="  public:&#xa;    /*文件名的最大长度*/&#xa;    static const int FILENAME_LEN = 200;&#xa;    /*读缓冲区的大小*/&#xa;    static const int READ_BUFFER_SIZE = 2048;&#xa;    /*写缓冲区的大小*/&#xa;    static const int WRITE_BUFFER_SIZE = 1024;&#xa;    /*HTTP请求方法，但我们仅支持GET*/&#xa;    enum METHOD {&#xa;        GET = 0,&#xa;        POST,&#xa;        HEAD,&#xa;        PUT,&#xa;        DELETE,&#xa;        TRACE,&#xa;        OPTIONS,&#xa;        CONNECT,&#xa;        PATCH&#xa;    };&#xa;    /*解析客户请求时，主状态机所处的状态（回忆第8章）*/&#xa;    enum CHECK_STATE {&#xa;        CHECK_STATE_REQUESTLINE = 0,&#xa;        CHECK_STATE_HEADER,&#xa;        CHECK_STATE_CONTENT&#xa;    };&#xa;    /*服务器处理HTTP请求的可能结果*/&#xa;    enum HTTP_CODE {&#xa;        NO_REQUEST,&#xa;        GET_REQUEST,&#xa;        BAD_REQUEST,&#xa;        NO_RESOURCE,&#xa;        FORBIDDEN_REQUEST,&#xa;        FILE_REQUEST,&#xa;        INTERNAL_ERROR,&#xa;        CLOSED_CONNECTION&#xa;    };&#xa;    /*行的读取状态*/&#xa;    enum LINE_STATUS { LINE_OK = 0, LINE_BAD, LINE_OPEN };&#xa;  public:&#xa;    http_conn() {}&#xa;    ~http_conn() {}&#xa;  public:&#xa;    /*初始化新接受的连接*/&#xa;    void init(int sockfd, const sockaddr_in&amp; addr);&#xa;    /*关闭连接*/&#xa;    void close_conn(bool real_close = true);&#xa;    /*处理客户请求*/&#xa;    void process();&#xa;    /*非阻塞读操作*/&#xa;    bool read();&#xa;    /*非阻塞写操作*/&#xa;    bool write();&#xa;&#xa;  public:&#xa;    /*所有socket上的事件都被注册到同一个epoll内核事件表中，所以将epoll文件描&#xa;    述符设置为静态的*/&#xa;    static int m_epollfd;&#xa;    /*统计用户数量*/&#xa;    static int m_user_count;" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" vertex="1" parent="dmyJtrqDC34_YT-JDQjB-6">
          <mxGeometry y="30" width="663" height="836" as="geometry" />
        </mxCell>
        <mxCell id="dmyJtrqDC34_YT-JDQjB-8" value="  private:&#xa;    /*初始化连接*/&#xa;    void init();&#xa;    /*解析HTTP请求*/&#xa;    HTTP_CODE process_read();&#xa;    /*填充HTTP应答*/&#xa;    bool process_write(HTTP_CODE ret);&#xa;    /*下面这一组函数被process_read调用以分析HTTP请求*/&#xa;    HTTP_CODE parse_request_line(char* text);&#xa;    HTTP_CODE parse_headers(char* text);&#xa;    HTTP_CODE parse_content(char* text);&#xa;    HTTP_CODE do_request();&#xa;    char*     get_line()&#xa;    {&#xa;        return m_read_buf + m_start_line;&#xa;    }&#xa;    LINE_STATUS parse_line();&#xa;    /*下面这一组函数被process_write调用以填充HTTP应答*/&#xa;    void unmap();&#xa;    bool add_response(const char* format, ...);&#xa;    bool add_content(const char* content);&#xa;    bool add_status_line(int status, const char* title);&#xa;    bool add_headers(int content_length);&#xa;    bool add_content_length(int content_length);&#xa;    bool add_linger();&#xa;    bool add_blank_line();" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" vertex="1" parent="dmyJtrqDC34_YT-JDQjB-6">
          <mxGeometry y="866" width="663" height="373" as="geometry" />
        </mxCell>
        <mxCell id="dmyJtrqDC34_YT-JDQjB-9" value="  private:&#xa;    /*该HTTP连接的socket和对方的socket地址*/&#xa;    int         m_sockfd;&#xa;    sockaddr_in m_address;&#xa;    /*读缓冲区*/&#xa;    char m_read_buf[READ_BUFFER_SIZE];&#xa;    /*标识读缓冲中已经读入的客户数据的最后一个字节的下一个位置*/&#xa;    int m_read_idx;&#xa;    /*当前正在分析的字符在读缓冲区中的位置*/&#xa;    int m_checked_idx;&#xa;    /*当前正在解析的行的起始位置*/&#xa;    int m_start_line;&#xa;    /*写缓冲区*/&#xa;    char m_write_buf[WRITE_BUFFER_SIZE];&#xa;    /*写缓冲区中待发送的字节数*/&#xa;    int m_write_idx;&#xa;    /*主状态机当前所处的状态*/&#xa;    CHECK_STATE m_check_state;&#xa;    /*请求方法*/&#xa;    METHOD m_method;&#xa;    /*客户请求的目标文件的完整路径，其内容等于doc_root+m_url，doc_root是网站&#xa;    根目录*/&#xa;    char m_real_file[FILENAME_LEN];&#xa;    /*客户请求的目标文件的文件名*/&#xa;    char* m_url;&#xa;    /*HTTP协议版本号，我们仅支持HTTP/1.1*/&#xa;    char* m_version;&#xa;    /*主机名*/&#xa;    char* m_host;&#xa;    /*HTTP请求的消息体的长度*/&#xa;    int m_content_length;&#xa;    /*HTTP请求是否要求保持连接*/&#xa;    bool m_linger;&#xa;    /*客户请求的目标文件被mmap到内存中的起始位置*/&#xa;    char* m_file_address;&#xa;    /*目标文件的状态。通过它我们可以判断文件是否存在、是否为目录、是否可读，并获&#xa;    取文件大小等信息*/&#xa;    struct stat m_file_stat;&#xa;    /*我们将采用writev来执行写操作，所以定义下面两个成员，其中m_iv_count表示&#xa;    被写内存块的数量*/&#xa;    struct iovec m_iv[2];&#xa;    int          m_iv_count;" style="text;strokeColor=default;fillColor=none;align=left;verticalAlign=middle;spacingLeft=4;spacingRight=4;overflow=hidden;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;rotatable=0;rounded=0;sketch=0;fontColor=#393C56;" vertex="1" parent="dmyJtrqDC34_YT-JDQjB-6">
          <mxGeometry y="1239" width="663" height="606" as="geometry" />
        </mxCell>
        <mxCell id="dmyJtrqDC34_YT-JDQjB-10" style="edgeStyle=orthogonalEdgeStyle;curved=0;rounded=1;sketch=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;entryX=1.005;entryY=0.597;entryDx=0;entryDy=0;entryPerimeter=0;fontColor=#393C56;strokeColor=#E07A5F;fillColor=#F2CC8F;" edge="1" parent="1" source="dmyJtrqDC34_YT-JDQjB-7" target="dmyJtrqDC34_YT-JDQjB-3">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
